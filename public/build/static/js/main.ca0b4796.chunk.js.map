{"version":3,"sources":["assets/defaultposter.png","services/CommonTypes.ts","pages/Home.tsx","components/ImgUploader.tsx","components/MovieForm.tsx","services/MovieService.ts","pages/movie/AddMovie.tsx","pages/movie/EditMovie.tsx","components/MovieTable.tsx","redux/actions/MovieAction.ts","pages/movie/MovieList.tsx","pages/Layout.tsx","redux/reducers/MovieReducer.ts","redux/reducers/RootReducer.ts","redux/store.ts","App.tsx","index.tsx"],"names":["module","exports","SwitchType","React","Component","state","showModal","this","props","value","PlusOutlined","uid","name","url","options","console","log","formData","FormData","append","filename","file","request","Request","action","method","body","fetch","then","resp","json","err","message","error","onChange","data","listType","accept","fileList","getFileList","customRequest","handleRequest","bind","onRemove","onPreview","setState","getUploadContent","visible","footer","onCancel","alt","style","width","src","formItemLayout","labelCol","span","wrapperCol","offset","AllAreas","label","AllTypes","MovieForm","formRef","createRef","handleFinish","values","a","current","getFieldsValue","onSubmit","result","success","history","push","prevProps","movie","setFieldsValue","ref","onFinish","initialValues","isHot","isComing","isClassic","Item","rules","required","Group","min","step","valuePropName","TextArea","type","htmlType","withRouter","MovieService","Axios","post","id","put","delete","get","condition","params","add","undefined","getMovieById","match","edit","onLoad","p","padding","marginBottom","display","key","e","onKeyChange","target","onPressEnter","onSearch","icon","SearchOutlined","size","onClick","title","dataIndex","render","poster","className","defaultposterImg","filterDropdown","getFilterDropDown","filterIcon","text","join","timeLong","record","checked","newVal","onSwitchChange","_id","to","onConfirm","onDelete","okText","cancelText","danger","total","page","pageSize","limit","pagination","rowKey","loading","isLoading","getPageConfig","handleChange","dataSource","columns","getColumns","saveMoviesAction","movies","payload","setLoadingAction","setConditionAction","deleteAction","changeSwitchAction","fetchMovies","dispatch","getState","curCondition","getMoviesByPage","deleteMovie","changeSwitch","connect","MovieAction","newState","newPage","MovieTable","Header","Layout","Sider","Content","_Layout","mode","theme","PieChartOutlined","path","component","Home","exact","MovieList","AddMovie","EditMovie","defaultState","totalPage","saveMovie","Math","ceil","setCondition","setLoading","filter","m","find","d","newMovie","newData","map","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","logger","App","ReactDOM","document","getElementById"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,2C,wGC+C/BC,E,4QCzCJ,OACI,gG,GAHiBC,IAAMC,W,gUCW/BC,MAAmB,CACfC,WAAW,G,iEAQX,OAAIC,KAAKC,MAAMC,MACJ,KAGH,6BACI,kBAACC,EAAA,EAAD,MACA,0C,oCAWZ,OAAIH,KAAKC,MAAMC,MACJ,CACH,CACIE,IAAKJ,KAAKC,MAAMC,MAChBG,KAAML,KAAKC,MAAMC,MACjBI,IAAKN,KAAKC,MAAMC,QAIrB,K,6EAMSK,G,kFAChBC,QAAQC,IAAIF,IACRG,EAAW,IAAIC,UACVC,OAAOL,EAAQM,SAAUN,EAAQO,MACpCC,EAAU,IAAIC,QAAQT,EAAQU,OAAQ,CACxCC,OAAQ,OACRC,KAAMT,I,SAEiDU,MAAML,GAASM,MAAK,SAAAC,GAAI,OAAIA,EAAKC,U,OAAtFD,E,OACNd,QAAQC,IAAIa,GACRA,EAAKE,IACLC,IAAQC,MAAM,4BAEd1B,KAAKC,MAAM0B,UAAY3B,KAAKC,MAAM0B,SAASL,EAAKM,M,sIAG9C,IAAD,OACL,OACI,6BAEI,kBAAC,IAAD,CACIX,OAAO,cACPY,SAAS,eACTC,OAAO,4BACPzB,KAAK,UACL0B,SAAU/B,KAAKgC,cAEfC,cAAejC,KAAKkC,cAAcC,KAAKnC,MACvCoC,SAAU,WACN,EAAKnC,MAAM0B,UAAY,EAAK1B,MAAM0B,SAAS,KAE/CU,UAAW,WACP7B,QAAQC,IAAI,4BACZ,EAAK6B,SAAS,CACVvC,WAAW,MAIlBC,KAAKuC,oBAIV,kBAAC,IAAD,CACIC,QAASxC,KAAKF,MAAMC,UACpB0C,OAAQ,KACRC,SAAU,WACN,EAAKJ,SAAS,CACVvC,WAAW,MAInB,yBAAK4C,IAAI,eAAKC,MAAO,CAAEC,MAAO,QAAUC,IAAK9C,KAAKC,MAAMC,c,GA7F/CN,IAAMC,WCG7BkD,EAAiB,CACnBC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,GAAIE,OAAQ,IAG9BC,EAA+C,CACjD,CAAEC,MAAO,2BAAQnD,MAAO,4BACxB,CAAEmD,MAAO,eAAMnD,MAAO,gBACtB,CAAEmD,MAAO,2BAAQnD,MAAO,4BACxB,CAAEmD,MAAO,2BAAQnD,MAAO,6BAGtBoD,EAA+C,CACjD,CAAED,MAAO,eAAMnD,MAAO,gBACtB,CAAEmD,MAAO,eAAMnD,MAAO,gBACtB,CAAEmD,MAAO,eAAMnD,MAAO,gBACtB,CAAEmD,MAAO,eAAMnD,MAAO,iBAGpBqD,E,4MACFC,QAAU5D,IAAM6D,Y,EAMRC,a,uCAAe,WAAOC,GAAP,eAAAC,EAAA,6DACnBD,EAAS,EAAKH,QAAQK,QAASC,iBAC/BtD,QAAQC,IAAIkD,GAFO,SAGE,EAAK1D,MAAM8D,SAASJ,GAHtB,QAGbK,EAHa,QAKfvC,IAAQC,MAAMsC,GAEdvC,IAAQwC,QAAQ,2BAAQ,GAAG,WACvB,EAAKhE,MAAMiE,QAAQC,KAAK,aARb,2C,uHAiBJC,GACXpE,KAAKC,MAAMoE,QAAUD,EAAUC,OAC3BrE,KAAKwD,QAAQK,SACb7D,KAAKwD,QAAQK,QAAQS,eAAetE,KAAKC,MAAMoE,S,+BAKvD,OACI,6BACI,kBAAC,IAAD,eAAMzB,MAAO,CAAEC,MAAO,KAClB0B,IAAKvE,KAAKwD,SACNT,EAFR,CAGIyB,SAAUxE,KAAK0D,aAAavB,KAAKnC,MACjCyE,cAAe,CACXC,OAAO,EACPC,UAAU,EACVC,WAAW,KAGf,kBAAC,IAAKC,KAAN,CAAWxE,KAAK,OACZgD,MAAM,2BACNyB,MAAO,CAAC,CAAEC,UAAU,EAAMtD,QAAS,gDACnC,kBAAC,IAAD,OAEJ,kBAAC,IAAKoD,KAAN,CAAWxE,KAAK,SACZgD,MAAM,gBACN,kBAAC,EAAD,OAEJ,kBAAC,IAAKwB,KAAN,CAAWxE,KAAK,QACZgD,MAAM,eACNyB,MAAO,CAAC,CAAEC,UAAU,EAAMtD,QAAS,oCACnC,kBAAC,IAASuD,MAAV,CAAgBzE,QAAS6C,KAE7B,kBAAC,IAAKyB,KAAN,CAAWxE,KAAK,QACZgD,MAAM,eACNyB,MAAO,CAAC,CAAEC,UAAU,EAAMtD,QAAS,oCACnC,kBAAC,IAASuD,MAAV,CAAgBzE,QAAS+C,KAE7B,kBAAC,IAAKuB,KAAN,CAAWxE,KAAK,WACZgD,MAAM,6BACNyB,MAAO,CAAC,CAAEC,UAAU,EAAMtD,QAAS,oCAEnC,kBAAC,IAAD,CAAawD,IAAK,EAAGC,KAAM,MAE/B,kBAAC,IAAKL,KAAN,CAAWxE,KAAK,QAAQgD,MAAM,2BAAO8B,cAAc,WAC/C,kBAAC,IAAD,OAEJ,kBAAC,IAAKN,KAAN,CAAWxE,KAAK,WAAWgD,MAAM,2BAAO8B,cAAc,WAClD,kBAAC,IAAD,OAEJ,kBAAC,IAAKN,KAAN,CAAWxE,KAAK,YAAYgD,MAAM,2BAAO8B,cAAc,WACnD,kBAAC,IAAD,OAEJ,kBAAC,IAAKN,KAAN,CAAWxE,KAAK,cAAcgD,MAAM,gBAChC,kBAAC,IAAM+B,SAAP,OAEJ,kBAAC,IAAKP,KAAN,CAAW7B,SAAU,CAAEC,KAAM,GACzBC,WAAY,CAAED,KAAM,GAAIE,OAAQ,IAChC,kBAAC,IAAD,CAAQkC,KAAK,UAAUC,SAAS,UAAhC,uB,GAnFA1F,IAAMC,WA4Ff0F,cAAWhC,G,kBC3GbiC,EAAb,0IASInB,GATJ,yFAW2BoB,IAAMC,KAAK,aAAcrB,GAXpD,uBAWYzC,EAXZ,EAWYA,KAXZ,kBAYWA,GAZX,sKAuBI+D,EACAtB,GAxBJ,yFA0B2BoB,IAAMG,IAAI,cAAgBD,EAAItB,GA1BzD,uBA0BYzC,EA1BZ,EA0BYA,KA1BZ,kBA2BWA,GA3BX,0KAqCI+D,GArCJ,yFAuC2BF,IAAMI,OAAO,cAAgBF,GAvCxD,uBAuCY/D,EAvCZ,EAuCYA,KAvCZ,kBAwCWA,GAxCX,8KAkDI+D,GAlDJ,yFAoD2BF,IAAMK,IAAI,cAAgBH,GApDrD,uBAoDY/D,EApDZ,EAoDYA,KApDZ,kBAqDWA,GArDX,iLA+DImE,GA/DJ,yFAiE2BN,IAAMK,IAAI,aAAc,CAC7CE,OAAQD,IAlEd,uBAiEYnE,EAjEZ,EAiEYA,KAjEZ,kBAoEWA,GApEX,yG,yKCdQ,OACI,6BAEI,kBAAC,EAAD,CAAWmC,SAAQ,uCAAE,WAAOM,GAAP,eAAAT,EAAA,sEACE4B,EAAaS,IAAI5B,GADnB,YACX/C,EADW,QAERM,KAFQ,yCAGN,IAHM,gCAKNN,EAAKE,KALC,2CAAF,6D,GALN5B,IAAMC,W,8MCS/BC,MAAwB,CACpBuE,WAAO6B,G,kMAGYV,EAAaW,aAAanG,KAAKC,MAAMmG,MAAMJ,OAAOL,I,QACjE,QADErE,E,cACF,IAAJA,OAAA,EAAAA,EAAMM,OAAQ5B,KAAKsC,SAAS,CACxB+B,MAAO/C,EAAKM,O,qIAGV,IAAD,OACL,OACI,6BAEI,kBAAC,EAAD,CAAWyC,MAAOrE,KAAKF,MAAMuE,MACzBN,SAAQ,uCAAE,WAAOM,GAAP,eAAAT,EAAA,sEACa4B,EAAaa,KAAK,EAAKpG,MAAMmG,MAAMJ,OAAOL,GAAItB,GAD3D,YACA/C,EADA,QAEGM,KAFH,yCAGK,IAHL,gCAKKN,EAAKE,KALV,2CAAF,6D,GAfC5B,IAAMC,W,uDNkCvBF,K,cAAAA,E,oBAAAA,E,uBAAAA,M,sMOAJa,QAAQC,IAAIT,KAAKC,OACbD,KAAKC,MAAMqG,QACXtG,KAAKC,MAAMqG,W,wCASOC,GAAyB,IAAD,OAC9C,OACI,yBAAK3D,MAAO,CAAE4D,QAAS,IACnB,kBAAC,IAAD,CACI5D,MAAO,CAAEC,MAAO,IAAK4D,aAAc,EAAGC,QAAS,SAC/CxG,MAAOF,KAAKC,MAAM8F,UAAUY,IAC5BhF,SAAU,SAACiF,GAAD,OAAO,EAAK3G,MAAM4G,YAAYD,EAAEE,OAAO5G,QACjD6G,aAAc/G,KAAKC,MAAM+G,WAE7B,kBAAC,IAAD,KACI,kBAAC,IAAD,CACI3B,KAAK,UACL4B,KAAM,kBAACC,EAAA,EAAD,MACNC,KAAK,QACLC,QAASpH,KAAKC,MAAM+G,SACpBpE,MAAO,CAAEC,MAAO,KALpB,gBAMA,kBAAC,IAAD,CAAQsE,KAAK,QAAQvE,MAAO,CAAEC,MAAO,IACjCuE,QAAS,WACL,EAAKnH,MAAM4G,YAAY,IACvB,EAAK5G,MAAM+G,aAHnB,oB,mCAY2B,IAAD,OACtC,MAAO,CACH,CACIK,MAAO,eAAMC,UAAW,SAAUC,OAAQ,SAACC,GACvC,OAAIA,EACO,yBAAKC,UAAU,cAAc3E,IAAK0E,EAAQ7E,IAAI,iBAE9C,yBAAK8E,UAAU,cAAc3E,IAAK4E,IAAkB/E,IAAI,mBAI3E,CACI0E,MAAO,eAAMC,UAAW,OAAQK,eAAgB3H,KAAK4H,kBAAkBzF,KAAKnC,MAAO6H,WAAY,kBAACX,EAAA,EAAD,OAEnG,CACIG,MAAO,eAAMC,UAAW,QAASC,OAAQ,SAACO,GACtC,OAAOA,EAAKC,KAAK,QAGzB,CACIV,MAAO,eAAMC,UAAW,QAASC,OAAQ,SAACO,GACtC,OAAOA,EAAKC,KAAK,QAGzB,CACIV,MAAO,eAAMC,UAAW,WAAYC,OADxC,SAC+CS,GACvC,OAAOA,EAAW,iBAG1B,CACIX,MAAO,2BAAQC,UAAW,QAASC,OAAQ,SAAC7C,EAAOuD,GAC/C,OAAO,kBAAC,IAAD,CAAQC,QAASxD,EAAO/C,SAAU,SAACwG,GACtC,EAAKlI,MAAMmI,eAAezI,EAAW+E,MAAOyD,EAAQF,EAAOI,UAIvE,CACIhB,MAAO,2BAAQC,UAAW,WAAYC,OAAQ,SAAC5C,EAAUsD,GACrD,OAAO,kBAAC,IAAD,CAAQC,QAASvD,EAAUhD,SAAU,SAACwG,GACzC,EAAKlI,MAAMmI,eAAezI,EAAWgF,SAAUwD,EAAQF,EAAOI,UAI1E,CACIhB,MAAO,2BAAQC,UAAW,YAAaC,OAAQ,SAAC3C,EAAWqD,GACvD,OAAO,kBAAC,IAAD,CAAQC,QAAStD,EAAWjD,SAAU,SAACwG,GAC1C,EAAKlI,MAAMmI,eAAezI,EAAWiF,UAAWuD,EAAQF,EAAOI,UAI3E,CACIhB,MAAO,eAAMC,UAAW,MAAOC,OAAQ,SAAC5B,GACpC,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAS2C,GAAI,eAAiB3C,GAC1B,kBAAC,IAAD,CAAQN,KAAK,UAAU8B,KAAK,SAA5B,iBAEJ,kBAAC,IAAD,CACIE,MAAM,wCACNkB,UAAS,sBAAE,sBAAA3E,EAAA,sEACD,EAAK3D,MAAMuI,SAAS7C,GADnB,OAEPlE,IAAQwC,QAAQ,kCAFT,2CAIXvB,SAAQ,sBAAE,sBAAAkB,EAAA,sEACA,EAAK3D,MAAMuI,SAAS7C,GADpB,OAENlE,IAAQwC,QAAQ,kCAFV,2CAIVwE,OAAO,eACPC,WAAW,gBAEX,kBAAC,IAAD,CAAQrD,KAAK,UAAUsD,QAAM,EAACxB,KAAK,SAAnC,wB,sCAa5B,OAAyB,IAArBnH,KAAKC,MAAM2I,OAGR,CACH/E,QAAS7D,KAAKC,MAAM8F,UAAU8C,KAC9BC,SAAU9I,KAAKC,MAAM8F,UAAUgD,MAC/BH,MAAO5I,KAAKC,MAAM2I,S,mCAObI,GAEThJ,KAAKC,MAAM0B,SAASqH,EAAWnF,W,+BAI/B,OACI,6BACI,kBAAC,IAAD,CAAOoF,OAAO,MACVC,QAASlJ,KAAKC,MAAMkJ,UACpBH,WAAYhJ,KAAKoJ,gBACjBzH,SAAU3B,KAAKqJ,aAAalH,KAAKnC,MACjCsJ,WAAYtJ,KAAKC,MAAM2B,KACvB2H,QAASvJ,KAAKwJ,oB,GAvJL5J,IAAMC,W,SCtBnC,SAAS4J,EAAiBC,EAAkBd,GAC1C,MAAO,CACLvD,KAAM,aACNsE,QAAS,CACPD,SACAd,UAYN,SAASgB,EAAiBT,GACxB,MAAO,CACL9D,KAAM,mBACNsE,QAASR,GAcb,SAASU,EAAmB9D,GAC1B,MAAO,CACLV,KAAM,qBACNsE,QAAS5D,GAWb,SAAS+D,EAAanE,GACpB,MAAO,CACLN,KAAM,eACNsE,QAAShE,GAmBb,SAASoE,EACP1E,EACA8C,EACAxC,GAEA,MAAO,CACLN,KAAM,eACNsE,QAAS,CACPtE,OACA8C,SACAxC,OAgFS,OACb8D,mBACAG,mBACAC,qBACAC,eACAE,YAlEF,SACEjE,GAEA,8CAAO,WAAOkE,EAAUC,GAAjB,iBAAAtG,EAAA,6DAELqG,EAASL,GAAiB,IAE1BK,EAASJ,EAAmB9D,IAEtBoE,EAAeD,IAAW7F,MAAM0B,UANjC,SAOcP,EAAa4E,gBAAgBD,GAP3C,OAOC7I,EAPD,OASL2I,EAASR,EAAiBnI,EAAKM,KAAMN,EAAKsH,QAE1CqB,EAASL,GAAiB,IAXrB,2CAAP,yDAgEAS,YA7CF,SACE1E,GAEA,8CAAO,WAAOsE,GAAP,SAAArG,EAAA,6DAELqG,EAASL,GAAiB,IAFrB,SAICpE,EAAaK,OAAOF,GAJrB,OAMLsE,EAASH,EAAanE,IAEtBsE,EAASL,GAAiB,IARrB,2CAAP,uDA2CAG,qBACAO,aAzBF,SAAsBjF,EACpB8C,EACAxC,GACE,8CAAO,WAAOsE,GAAP,SAAArG,EAAA,6DAEPqG,EAASF,EAAmB1E,EAAK8C,EAAOxC,IAFjC,SAIDH,EAAaa,KAAKV,EAAlB,eACHN,EAAM8C,IALF,OAQP8B,EAASH,EAAanE,IAEtBsE,EAASL,GAAiB,IAVnB,2CAAP,wDC/JWW,gBAEf,SAAyBzK,GACrB,OAAOA,EAAMuE,SAKjB,SAA4B4F,GACxB,MAAO,CACH3D,OADG,WAEC2D,EAASO,EAAYR,YAAY,CAC7BnB,KAAM,EACNE,MAAO,GACPpC,IAAK,OAGbyB,eARG,SAQY/C,EAAMoF,EAAU9E,GAC3BsE,EAASO,EAAYF,aAAajF,EAAMoF,EAAU9E,KAEhD6C,SAXH,SAWY7C,GAAK,OAAD,oHACTsE,EAASO,EAAYH,YAAY1E,IADxB,8CAGnBhE,SAdG,SAcM+I,GACLT,EAASO,EAAYR,YAAY,CAC7BnB,KAAM6B,MAGd7D,YAnBG,SAmBSF,GACRsD,EAASO,EAAYX,mBAAmB,CACpClD,UAGRK,SAxBG,WAyBCiD,EAASO,EAAYR,YAAY,CAC7BnB,KAAM,SAnCP0B,CAA6CI,G,iCCFpDC,GAA2BC,KAA3BD,OAAQE,GAAmBD,KAAnBC,MAAOC,GAAYF,KAAZE,QAsCRC,GAnCW,WACtB,OACI,yBAAKvD,UAAU,aAEX,kBAAC,KAAD,KAEI,kBAACmD,GAAD,CAAQnD,UAAU,UACd,kBAAC,IAAD,CAASa,GAAG,KAAZ,qDAEJ,kBAAC,KAAD,KAEI,kBAACwC,GAAD,KACI,kBAAC,KAAD,CAAMG,KAAK,SAASC,MAAM,QACtB,kBAAC,KAAKrG,KAAN,CAAW8B,IAAI,IAAIM,KAAM,kBAACkE,GAAA,EAAD,OACrB,kBAAC,IAAD,CAAS7C,GAAG,UAAZ,6BAEJ,kBAAC,KAAKzD,KAAN,CAAW8B,IAAI,IAAIM,KAAM,kBAACkE,GAAA,EAAD,OACrB,kBAAC,IAAD,CAAS7C,GAAG,cAAZ,+BAKZ,kBAACyC,GAAD,KACI,yBAAKnI,MAAO,CAAE4D,QAAS,UACnB,kBAAC,IAAD,CAAO4E,KAAK,IAAIC,UAAWC,EAAMC,OAAO,IACxC,kBAAC,IAAD,CAAOH,KAAK,SAASG,OAAO,EAAMF,UAAWG,KAC7C,kBAAC,IAAD,CAAOJ,KAAK,aAAaC,UAAWI,IACpC,kBAAC,IAAD,CAAOL,KAAK,kBAAkBC,UAAWK,U,kBCe/DC,GAA4B,CAChC/J,KAAM,GACNmE,UAAW,CACT8C,KAAM,EACNE,MAAO,GACPpC,IAAK,IAEPiC,MAAO,EACPO,WAAW,EACXyC,UAAW,GAQPC,GAA4C,SAAU/L,EAAOmB,GAKjE,OAAO,gBACFnB,EADL,CAEE8B,KAAMX,EAAO0I,QAAQD,OACrBd,MAAO3H,EAAO0I,QAAQf,MACtBgD,UAAWE,KAAKC,KAAK9K,EAAO0I,QAAQf,MAAQ9I,EAAMiG,UAAUgD,UAI1DiD,GAAiD,SACrDlM,EACAmB,GAEA,IAAMwJ,EAAQ,gBACT3K,EADS,CAEZiG,UAAU,gBACLjG,EAAMiG,UADF,GAEJ9E,EAAO0I,WAId,OADAc,EAASmB,UAAYE,KAAKC,KAAKtB,EAAS7B,MAAQ6B,EAAS1E,UAAUgD,OAC5D0B,GAGHwB,GAA6C,SAAUnM,EAAOmB,GAClE,OAAO,gBACFnB,EADL,CAEEqJ,UAAWlI,EAAO0I,WAIhBU,GAA0C,SAAUvK,EAAOmB,GAC/D,OAAO,gBACFnB,EADL,CAEE8B,KAAM9B,EAAM8B,KAAKsK,QAAO,SAACC,GAAD,OAAOA,EAAE9D,MAAQpH,EAAO0I,WAChDf,MAAO9I,EAAM8I,MAAQ,EACrBgD,UAAWE,KAAKC,MAAMjM,EAAM8I,MAAQ,GAAK9I,EAAMiG,UAAUgD,UAIvDuB,GAAsD,SAC1DxK,EACAmB,GAEA,IAAMoD,EAAQvE,EAAM8B,KAAKwK,MAAK,SAACC,GAAD,OAAOA,EAAEhE,MAAQpH,EAAO0I,QAAQhE,MAC9D,IAAKtB,EACH,OAAOvE,EAET,IAAMwM,EAAQ,gBAAQjI,GACtBiI,EAASrL,EAAO0I,QAAQtE,MAAQpE,EAAO0I,QAAQxB,OAC/C,IAAMoE,EAAUzM,EAAM8B,KAAK4K,KAAI,SAACH,GAC9B,OAAIA,EAAEhE,MAAQpH,EAAO0I,QAAQhE,GACpB2G,EAEAD,KAIX,OADA7L,QAAQC,IAAI8L,GACL,gBACFzM,EADL,CAEE8B,KAAK2K,KC3HIE,GAAcC,aAAgB,CACzCrI,MDoIa,WAGZ,IAFDvE,EAEA,uDAFqB6L,GACrB1K,EACA,uCACA,OAAQA,EAAOoE,MACb,IAAK,aACH,OAAOwG,GAAU/L,EAAOmB,GAC1B,IAAK,qBACH,OAAO+K,GAAalM,EAAOmB,GAC7B,IAAK,mBACH,OAAOgL,GAAWnM,EAAOmB,GAC3B,IAAK,eACH,OAAOoJ,GAAYvK,EAAOmB,GAC5B,IAAK,eACH,OAAOqJ,GAAaxK,EAAOmB,GAC7B,QACE,OAAOnB,M,+BEzJA6M,GAAQC,aACnBH,GACAI,aAAgBC,KAAsCC,OCQzCC,OAVf,WACE,OACE,kBAAC,IAAD,CAAUL,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOvB,KAAK,IAAIC,UAAWL,Q,OCHnCiC,IAAS1F,OACP,kBAAC,GAAD,MACA2F,SAASC,eAAe,W","file":"static/js/main.ca0b4796.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultposter.b4e877ba.png\";","//服务器返回结果 =>公共类型\r\n\r\n/**\r\n *错误\r\n * @export\r\n * @interface IResponseError\r\n */\r\nexport interface IResponseError {\r\n  err: string;\r\n  data: null;\r\n}\r\n/**\r\n *普通数据\r\n * @export\r\n * @interface IResponseData\r\n * @template T\r\n */\r\nexport interface IResponseData<T> {\r\n  err: \"\";\r\n  data: T;\r\n}\r\n/**\r\n *分页数据\r\n * @export\r\n * @interface IResponsePageData\r\n * @template T\r\n */\r\nexport interface IResponsePageData<T> {\r\n  err: string;\r\n  total: number;\r\n  data: T[];\r\n}\r\n/**\r\n *查询条件\r\n * @export\r\n * @interface ISearchCondition\r\n */\r\nexport interface ISearchCondition {\r\n  page?: number;\r\n  limit?: number;\r\n  key?: string;\r\n}\r\n/**\r\n *开关改变的枚举\r\n * @export\r\n * @enum {number}\r\n */\r\nexport enum SwitchType {\r\n  isHot = \"isHot\",\r\n  isComing = \"isComing\",\r\n  isClassic = \"isClassic\"\r\n}\r\n","import React from \"react\";\r\n\r\n//路由=>react-router逻辑 react-router-dom界面相关\r\n\r\nexport default class extends React.Component {\r\n    render() {\r\n        return (\r\n            <h1>欢迎使用电影管理系统</h1>\r\n        )\r\n    }\r\n}","import { message, Modal, Upload } from \"antd\";\r\nimport React from \"react\";\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport { RcCustomRequestOptions, UploadFile } from \"antd/lib/upload/interface\";\r\nimport { IResponseData, IResponseError } from \"../services/CommonTypes\";\r\n\r\ninterface IImgUploadProps {\r\n    value?: string //curImgUrl\r\n    onChange?: (imgUrl: string) => void\r\n}\r\ninterface IImgState {\r\n    showModal: boolean\r\n}\r\n// 图片上传组件=>显示页面\r\nexport default class extends React.Component<IImgUploadProps, IImgState> {\r\n    state: IImgState = {\r\n        showModal: false\r\n    }\r\n    /**\r\n     *得到图片的上传区域\r\n     * @private\r\n     * @returns\r\n     */\r\n    private getUploadContent() {\r\n        if (this.props.value) {\r\n            return null;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <PlusOutlined />\r\n                    <div>Upload</div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    /**\r\n     *得到图片显示\r\n     * @private\r\n     * @returns {UploadFile<any>[]}\r\n     */\r\n    private getFileList(): UploadFile<any>[] {\r\n        if (this.props.value) {\r\n            return [\r\n                {\r\n                    uid: this.props.value,\r\n                    name: this.props.value,\r\n                    url: this.props.value\r\n                }\r\n            ]\r\n        }\r\n        return []\r\n    }\r\n    /**\r\n     *手动上传图片\r\n     * @param {RcCustomRequestOptions} options\r\n     */\r\n    async handleRequest(options: RcCustomRequestOptions) {\r\n        console.log(options);\r\n        let formData = new FormData()\r\n        formData.append(options.filename, options.file)\r\n        const request = new Request(options.action, {\r\n            method: \"post\",\r\n            body: formData\r\n        })\r\n        const resp: IResponseData<string> | IResponseError = await fetch(request).then(resp => resp.json())\r\n        console.log(resp);\r\n        if (resp.err) {\r\n            message.error(\"上传失败\")\r\n        } else {\r\n            this.props.onChange && this.props.onChange(resp.data!)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* 上传图片区域 */}\r\n                <Upload\r\n                    action=\"/api/upload\"\r\n                    listType=\"picture-card\"\r\n                    accept=\".jpg,.png,.gif,.jpeg,.bmp\"\r\n                    name=\"imgfile\"\r\n                    fileList={this.getFileList()}\r\n                    // 通过覆盖默认的上传行为，可以自定义自己的上传实现\r\n                    customRequest={this.handleRequest.bind(this)}\r\n                    onRemove={() => {\r\n                        this.props.onChange && this.props.onChange(\"\")\r\n                    }}\r\n                    onPreview={() => {\r\n                        console.log(\"显示预览\");\r\n                        this.setState({\r\n                            showModal: true\r\n                        })\r\n                    }}\r\n                >\r\n                    {this.getUploadContent()}\r\n                </Upload>\r\n\r\n                {/* 预览区域用一个蒙层  */}\r\n                <Modal\r\n                    visible={this.state.showModal}\r\n                    footer={null}\r\n                    onCancel={() => {\r\n                        this.setState({\r\n                            showModal: false\r\n                        })\r\n                    }}\r\n                >\r\n                    <img alt=\"图片\" style={{ width: '100%' }} src={this.props.value} />\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}","import { Form, Input, Button, Checkbox, InputNumber, Switch, message } from \"antd\";\r\nimport { FormInstance } from \"antd/lib/form\";\r\nimport React from \"react\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { IMovie } from \"../services/MovieService\";\r\nimport ImgUploader from \"./ImgUploader\";\r\n\r\nexport interface IFormProps extends RouteComponentProps {\r\n    /**\r\n     *提交事件\r\n     * @memberof IFormProps\r\n     */\r\n    onSubmit: (movie: IMovie) => Promise<string>\r\n    /**用于修改电影时的数据回填Movie对象 */\r\n    movie?: IMovie\r\n}\r\n/** Form布局 */\r\nconst formItemLayout = {\r\n    labelCol: { span: 5 },\r\n    wrapperCol: { span: 18, offset: 1 },\r\n};\r\n/** 地区的数组 */\r\nconst AllAreas: { label: string; value: string }[] = [\r\n    { label: \"中国大陆\", value: \"中国大陆\" },\r\n    { label: \"美国\", value: \"美国\" },\r\n    { label: \"中国台湾\", value: \"中国台湾\" },\r\n    { label: \"中国香港\", value: \"中国香港\" },\r\n];\r\n/** 类型的数组 */\r\nconst AllTypes: { label: string; value: string }[] = [\r\n    { label: \"喜剧\", value: \"喜剧\" },\r\n    { label: \"灾难\", value: \"灾难\" },\r\n    { label: \"动作\", value: \"动作\" },\r\n    { label: \"爱情\", value: \"爱情\" },\r\n];\r\n// 电影表单组件=>显示页面(addMovie和editMovie)\r\nclass MovieForm extends React.Component<IFormProps> {\r\n    formRef = React.createRef<FormInstance<any>>();\r\n    /**\r\n     *提交表单且数据验证成功后回调事件\r\n     * @private\r\n     * @memberof MovieForm\r\n     */\r\n    private handleFinish = async (values: any) => {\r\n        values = this.formRef.current!.getFieldsValue()\r\n        console.log(values)\r\n        const result = await this.props.onSubmit(values as IMovie)\r\n        if (result) {\r\n            message.error(result)\r\n        } else {\r\n            message.success(\"处理成功\", 1, () => {\r\n                this.props.history.push(\"/movie\")\r\n            })\r\n        }\r\n    }\r\n    /**\r\n     *数据回显\r\n     * @param {*} prevProps\r\n     * @memberof MovieForm\r\n     */\r\n    componentDidUpdate(prevProps: any) {\r\n        if (this.props.movie !== prevProps.movie) {\r\n            if (this.formRef.current) {\r\n                this.formRef.current.setFieldsValue(this.props.movie)\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form style={{ width: 400 }}\r\n                    ref={this.formRef}\r\n                    {...formItemLayout}\r\n                    onFinish={this.handleFinish.bind(this)}\r\n                    initialValues={{\r\n                        isHot: false,\r\n                        isComing: false,\r\n                        isClassic: false\r\n                    }}\r\n                >\r\n                    <Form.Item name=\"name\"\r\n                        label=\"电影名称\"\r\n                        rules={[{ required: true, message: \"请填写电影名称\" }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"poster\"\r\n                        label=\"封面\" >\r\n                        <ImgUploader />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"areas\"\r\n                        label=\"地区\"\r\n                        rules={[{ required: true, message: \"请填写地区\" }]}>\r\n                        <Checkbox.Group options={AllAreas} />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"types\"\r\n                        label=\"类型\"\r\n                        rules={[{ required: true, message: \"请选择类型\" }]}>\r\n                        <Checkbox.Group options={AllTypes} />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"timeLong\"\r\n                        label=\"时长(分钟)\"\r\n                        rules={[{ required: true, message: \"请填写时长\" }]}\r\n                    >\r\n                        <InputNumber min={1} step={10} />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"isHot\" label=\"正在热映\" valuePropName=\"checked\">\r\n                        <Switch />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"isComing\" label=\"即将上映\" valuePropName=\"checked\">\r\n                        <Switch />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"isClassic\" label=\"经典影片\" valuePropName=\"checked\">\r\n                        <Switch />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"description\" label=\"描述\" >\r\n                        <Input.TextArea />\r\n                    </Form.Item>\r\n                    <Form.Item labelCol={{ span: 0 }}\r\n                        wrapperCol={{ span: 18, offset: 6 }}>\r\n                        <Button type=\"primary\" htmlType=\"submit\">提交</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(MovieForm);","import Axios from \"axios\";\r\nimport {\r\n  IResponseData,\r\n  IResponseError,\r\n  IResponsePageData,\r\n  ISearchCondition,\r\n} from \"./CommonTypes\";\r\n\r\n// ajax接口API处理\r\nexport interface IMovie {\r\n  _id?: string;\r\n  name: string;\r\n  types: string[];\r\n  areas: string[];\r\n  timeLong: number;\r\n  isHot: boolean;\r\n  isComing: boolean;\r\n  isClassic: boolean;\r\n  description?: string;\r\n  poster?: string;\r\n}\r\nexport class MovieService {\r\n  /**\r\n   *增\r\n   * @static\r\n   * @param {IMovie} movie\r\n   * @returns {(Promise<IResponseData<IMovie> | IResponseError>)} 返回普通数据、错误\r\n   * @memberof MovieService\r\n   */\r\n  public static async add(\r\n    movie: IMovie\r\n  ): Promise<IResponseData<IMovie> | IResponseError> {\r\n    const { data } = await Axios.post(\"/api/movie\", movie);\r\n    return data;\r\n  }\r\n  /**\r\n   *改\r\n   * @static\r\n   * @param {string} id\r\n   * @param {IMovie} movie\r\n   * @returns {(Promise<IResponseData<true> | IResponseError>)} 返回普通数据、错误\r\n   * @memberof MovieService\r\n   */\r\n  public static async edit(\r\n    id: string,\r\n    movie: Partial<IMovie> //类型演算,所有类型变为可选\r\n  ): Promise<IResponseData<true> | IResponseError> {\r\n    const { data } = await Axios.put(\"/api/movie/\" + id, movie);\r\n    return data;\r\n  }\r\n  /**\r\n   *删\r\n   * @static\r\n   * @param {string} id\r\n   * @returns {(Promise<IResponseData<true> | IResponseError>)} 返回普通数据、错误\r\n   * @memberof MovieService\r\n   */\r\n  public static async delete(\r\n    id: string\r\n  ): Promise<IResponseData<true> | IResponseError> {\r\n    const { data } = await Axios.delete(\"/api/movie/\" + id);\r\n    return data;\r\n  }\r\n  /**\r\n   *根据id查\r\n   * @static\r\n   * @param {string} id\r\n   * @returns {(Promise<IResponseData<IMovie> | null>)} 返回普通数据、空\r\n   * @memberof MovieService\r\n   */\r\n  public static async getMovieById(\r\n    id: string\r\n  ): Promise<IResponseData<IMovie> | null> {\r\n    const { data } = await Axios.get(\"/api/movie/\" + id);\r\n    return data;\r\n  }\r\n  /**\r\n   *按条件查询(page、limit、key)\r\n   * @static\r\n   * @param {ISearchCondition} condition\r\n   * @returns {Promise<IResponsePageData<IMovie>>}\r\n   * @memberof MovieService\r\n   */\r\n  public static async getMoviesByPage(\r\n    condition: ISearchCondition\r\n  ): Promise<IResponsePageData<IMovie>> {\r\n    const { data } = await Axios.get(\"/api/movie\", {\r\n      params: condition,\r\n    });\r\n    return data;\r\n    // 写成下面是方便在加载页面时loading效果更明显\r\n    // return new Promise((resolve) => {\r\n    //   setTimeout(async () => {\r\n    //     const { data } = await Axios.get(\"/api/movie\", {\r\n    //       params: condition,\r\n    //     });\r\n    //     resolve(data);\r\n    //   }, 1500);\r\n    // });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport MovieForm from \"../../components/MovieForm\";\r\nimport { MovieService } from \"../../services/MovieService\";\r\n\r\n//路由=>react-router逻辑 react-router-dom界面相关\r\nexport default class extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* 添加电影 */}\r\n                <MovieForm onSubmit={async (movie) => {\r\n                    const resp = await MovieService.add(movie);\r\n                    if (resp.data) {\r\n                        return \"\";\r\n                    } else {\r\n                        return resp.err;\r\n                    }\r\n                }}></MovieForm>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport MovieForm from \"../../components/MovieForm\";\r\nimport { IMovie, MovieService } from \"../../services/MovieService\";\r\n\r\n//路由=>react-router逻辑 react-router-dom界面相关\r\n//RouteComponentProps-路由的组件属性history、location、match\r\ninterface IParams {\r\n    id: string\r\n}\r\ninterface IEditPageState {\r\n    movie?: IMovie\r\n}\r\nexport default class extends React.Component<RouteComponentProps<IParams>, IEditPageState> {\r\n    state: IEditPageState = {\r\n        movie: undefined\r\n    }\r\n    async componentDidMount() {\r\n        const resp = await MovieService.getMovieById(this.props.match.params.id)\r\n        resp?.data && this.setState({\r\n            movie: resp.data\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/*  修改电影页 */}\r\n                <MovieForm movie={this.state.movie}\r\n                    onSubmit={async (movie) => {\r\n                        const resp = await MovieService.edit(this.props.match.params.id, movie);\r\n                        if (resp.data) {\r\n                            return \"\";\r\n                        } else {\r\n                            return resp.err;\r\n                        }\r\n                    }}></MovieForm>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { IMovieState } from \"../redux/reducers/MovieReducer\";\r\nimport { Table, Switch, Button, message, Popconfirm, Input, Space } from \"antd\";\r\nimport { ColumnsType, TablePaginationConfig } from \"antd/lib/table\";\r\nimport { IMovie } from \"../services/MovieService\";\r\nimport defaultposterImg from \"../assets/defaultposter.png\"\r\nimport { SwitchType } from \"../services/CommonTypes\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { FilterDropdownProps } from \"antd/lib/table/interface\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\n\r\n\r\nexport interface IMovieTableEvents {\r\n    /**\r\n     * 完成加载之后的事件(显示电影数据)\r\n     */\r\n    onLoad: () => void\r\n    /**\r\n     *开关点击事件\r\n     * @memberof IMovieTableEvents\r\n     */\r\n    onSwitchChange: (type: SwitchType, newState: boolean, id: string) => void\r\n    /**\r\n     *删除事件\r\n     * @memberof IMovieTableEvents\r\n     */\r\n    onDelete: (id: string) => Promise<void>\r\n    /**\r\n     * 点击分页时事件\r\n     */\r\n    onChange: (newPage: number) => void\r\n    /**\r\n     *关键字改变\r\n     * @memberof IMovieTableEvents\r\n     */\r\n    onKeyChange: (key: string) => void\r\n    /**\r\n     *关键字搜所事件\r\n     * @memberof IMovieTableEvents\r\n     */\r\n    onSearch: () => void\r\n}\r\n// 电影表格组件=>显示页面\r\n// 路由=>react-router逻辑 react-router-dom界面相关\r\n// 界面=>antd UI库\r\nexport default class extends React.Component<IMovieState & IMovieTableEvents> {\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n        if (this.props.onLoad) {\r\n            this.props.onLoad()\r\n        }\r\n    }\r\n\r\n    /**\r\n     *得到自定义筛选菜单\r\n     * @private\r\n     * @param {FilterDropdownProps} p\r\n     */\r\n    private getFilterDropDown(p: FilterDropdownProps) {\r\n        return (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                    value={this.props.condition.key}\r\n                    onChange={(e) => this.props.onKeyChange(e.target.value)}\r\n                    onPressEnter={this.props.onSearch}\r\n                />\r\n                <Space>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        icon={<SearchOutlined />}\r\n                        size=\"small\"\r\n                        onClick={this.props.onSearch}\r\n                        style={{ width: 90 }}>搜所</Button>\r\n                    <Button size=\"small\" style={{ width: 90 }}\r\n                        onClick={() => {\r\n                            this.props.onKeyChange(\"\")\r\n                            this.props.onSearch()\r\n                        }}\r\n                    >重置</Button>\r\n                </Space>\r\n            </div>)\r\n    }\r\n    /**\r\n     * 得到列项\r\n     */\r\n    private getColumns(): ColumnsType<IMovie> {\r\n        return [\r\n            {\r\n                title: \"封面\", dataIndex: \"poster\", render: (poster) => {\r\n                    if (poster) {\r\n                        return <img className=\"tablePoster\" src={poster} alt=\"图片\" />\r\n                    } else {\r\n                        return <img className=\"tablePoster\" src={defaultposterImg} alt=\"图片\" />\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                title: \"名称\", dataIndex: \"name\", filterDropdown: this.getFilterDropDown.bind(this), filterIcon: <SearchOutlined />\r\n            },\r\n            {\r\n                title: \"地区\", dataIndex: \"areas\", render: (text: string[]) => {\r\n                    return text.join(\", \");\r\n                }\r\n            },\r\n            {\r\n                title: \"类型\", dataIndex: \"types\", render: (text: string[]) => {\r\n                    return text.join(\", \");\r\n                }\r\n            },\r\n            {\r\n                title: \"时长\", dataIndex: \"timeLong\", render(timeLong) {\r\n                    return timeLong + \"分钟\";\r\n                }\r\n            },\r\n            {\r\n                title: \"正在热映\", dataIndex: \"isHot\", render: (isHot, record) => {\r\n                    return <Switch checked={isHot} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchType.isHot, newVal, record._id!)\r\n                    }} />\r\n                }\r\n            },\r\n            {\r\n                title: \"即将上映\", dataIndex: \"isComing\", render: (isComing, record) => {\r\n                    return <Switch checked={isComing} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchType.isComing, newVal, record._id!)\r\n                    }} />\r\n                }\r\n            },\r\n            {\r\n                title: \"经典影片\", dataIndex: \"isClassic\", render: (isClassic, record) => {\r\n                    return <Switch checked={isClassic} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchType.isClassic, newVal, record._id!)\r\n                    }} />\r\n                }\r\n            },\r\n            {\r\n                title: \"操作\", dataIndex: \"_id\", render: (id: string) => {\r\n                    return (\r\n                        <div>\r\n                            <Space>\r\n                                <NavLink to={\"/movie/edit/\" + id}>\r\n                                    <Button type=\"primary\" size=\"small\">编辑</Button>\r\n                                </NavLink>\r\n                                <Popconfirm\r\n                                    title=\"确定要删除吗?\"\r\n                                    onConfirm={async () => {\r\n                                        await this.props.onDelete(id);\r\n                                        message.success('删除成功！');\r\n                                    }}\r\n                                    onCancel={async () => {\r\n                                        await this.props.onDelete(id);\r\n                                        message.success('取消成功！');\r\n                                    }}\r\n                                    okText=\"确定\"\r\n                                    cancelText=\"取消\"\r\n                                >\r\n                                    <Button type=\"primary\" danger size=\"small\" >删除</Button>\r\n                                </Popconfirm>\r\n                            </Space>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n        ];\r\n    }\r\n    /**\r\n     * 得到分页\r\n     */\r\n    getPageConfig(): false | TablePaginationConfig {\r\n        if (this.props.total === 0) {\r\n            return false\r\n        }\r\n        return {\r\n            current: this.props.condition.page,\r\n            pageSize: this.props.condition.limit,\r\n            total: this.props.total\r\n        }\r\n    }\r\n    /**\r\n     * 页码跳转\r\n     * @param pagination \r\n     */\r\n    handleChange(pagination: TablePaginationConfig) {\r\n        // console.log(pagination);\r\n        this.props.onChange(pagination.current!)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Table rowKey=\"_id\"\r\n                    loading={this.props.isLoading}\r\n                    pagination={this.getPageConfig()}\r\n                    onChange={this.handleChange.bind(this)}\r\n                    dataSource={this.props.data}\r\n                    columns={this.getColumns()}></Table>\r\n            </div>\r\n        )\r\n    }\r\n}","import { ISearchCondition, SwitchType } from \"../../services/CommonTypes\";\r\nimport { IMovie, MovieService } from \"../../services/MovieService\";\r\nimport { IAction } from \"./ActionTypes\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { IRootState } from \"../reducers/RootReducer\";\r\n\r\n//redux状态管理=>actions平面对象(action的创建函数)\r\n\r\n// 类型别名\r\nexport type SaveMoviesAction = IAction<\r\n  \"movie_save\",\r\n  {\r\n    movies: IMovie[];\r\n    total: number;\r\n  }\r\n>;\r\n/**\r\n *保存电影\r\n * @export\r\n * @param {IMovie[]} movies\r\n * @param {number} total\r\n * @returns {saveMoviesAction}\r\n */\r\nfunction saveMoviesAction(movies: IMovie[], total: number): SaveMoviesAction {\r\n  return {\r\n    type: \"movie_save\",\r\n    payload: {\r\n      movies,\r\n      total,\r\n    },\r\n  };\r\n}\r\n\r\n// 类型别名\r\nexport type SetLoadingAction = IAction<\"movie_setLoading\", boolean>;\r\n/**\r\n *设置加载状态\r\n * @param {boolean} isLoading\r\n * @returns {setLoadingAction}\r\n */\r\nfunction setLoadingAction(isLoading: boolean): SetLoadingAction {\r\n  return {\r\n    type: \"movie_setLoading\",\r\n    payload: isLoading,\r\n  };\r\n}\r\n\r\n// 类型别名\r\nexport type SetConditionAction = IAction<\r\n  \"movie_setCondition\",\r\n  ISearchCondition\r\n>;\r\n/**\r\n *设置查询条件\r\n * @param {ISearchCondition} condition\r\n * @returns {setCondition}\r\n */\r\nfunction setConditionAction(condition: ISearchCondition): SetConditionAction {\r\n  return {\r\n    type: \"movie_setCondition\",\r\n    payload: condition,\r\n  };\r\n}\r\n\r\n// 类型别名\r\nexport type DeleteAction = IAction<\"movie_delete\", string>;\r\n/**\r\n *删除\r\n * @param {string} id\r\n * @returns {DeleteAction}\r\n */\r\nfunction deleteAction(id: string): DeleteAction {\r\n  return {\r\n    type: \"movie_delete\",\r\n    payload: id,\r\n  };\r\n}\r\n// 类型别名\r\nexport type MovieChangeSwitchAction = IAction<\r\n  \"movie_switch\",\r\n  {\r\n    type: SwitchType;\r\n    newVal: boolean;\r\n    id: string;\r\n  }\r\n>;\r\n/**\r\n *更改开关\r\n * @param {SwitchType} type\r\n * @param {boolean} newVal\r\n * @param {string} id\r\n * @returns {MovieChangeSwitchAction}\r\n */\r\nfunction changeSwitchAction(\r\n  type: SwitchType,\r\n  newVal: boolean,\r\n  id: string\r\n): MovieChangeSwitchAction {\r\n  return {\r\n    type: \"movie_switch\",\r\n    payload: {\r\n      type,\r\n      newVal,\r\n      id,\r\n    },\r\n  };\r\n}\r\n\r\n// 默认导出类型别名\r\nexport type MovieActions =\r\n  | SaveMoviesAction\r\n  | SetConditionAction\r\n  | SetLoadingAction\r\n  | DeleteAction\r\n  | MovieChangeSwitchAction;\r\n\r\n// 以下为处理异步的副作用函数\r\n/**\r\n *从服务器中获取数据\r\n * @param {ISearchCondition} condition\r\n * @returns {ThunkAction<Promise<void>, IRootState, any, MovieActions>}\r\n */\r\nfunction fetchMovies(\r\n  condition: ISearchCondition\r\n): ThunkAction<Promise<void>, IRootState, any, MovieActions> {\r\n  return async (dispatch, getState) => {\r\n    //1、设置加载状态\r\n    dispatch(setLoadingAction(true));\r\n    //2、设置条件\r\n    dispatch(setConditionAction(condition));\r\n    //3、获取服务器数据\r\n    const curCondition = getState().movie.condition;\r\n    const resp = await MovieService.getMoviesByPage(curCondition);\r\n    //4、更改仓库的数据\r\n    dispatch(saveMoviesAction(resp.data, resp.total));\r\n    //5、关闭加载状态\r\n    dispatch(setLoadingAction(false));\r\n  };\r\n}\r\n/**\r\n *删除电影\r\n * @param {string} id\r\n * @returns {ThunkAction<Promise<void>, IRootState, any, MovieActions>}\r\n */\r\nfunction deleteMovie(\r\n  id: string\r\n): ThunkAction<Promise<void>, IRootState, any, MovieActions> {\r\n  return async (dispatch) => {\r\n    //1、设置加载状态\r\n    dispatch(setLoadingAction(true));\r\n    //2、获取服务器数据\r\n    await MovieService.delete(id);\r\n    //3、删除仓库的数据\r\n    dispatch(deleteAction(id));\r\n    //4、关闭加载状态\r\n    dispatch(setLoadingAction(false));\r\n  };\r\n}\r\n/**\r\n *从服务器中修改电影热映、经典、即将上映三个开关\r\n *\r\n * @param {SwitchType} type\r\n * @param {boolean} newVal\r\n * @param {string} id\r\n * @returns {ThunkAction<Promise<void>, IRootState, any, MovieActions>}\r\n */\r\nfunction changeSwitch(type: SwitchType,\r\n  newVal: boolean,\r\n  id: string):ThunkAction<Promise<void>, IRootState, any, MovieActions>{\r\n    return async (dispatch)=>{\r\n      //1、设置加载状态\r\n    dispatch(changeSwitchAction(type,newVal,id));\r\n    //2、获取服务器数据\r\n    await MovieService.edit(id,{\r\n      [type]:newVal\r\n    });\r\n    //3、删除仓库的数据\r\n    dispatch(deleteAction(id));\r\n    //4、关闭加载状态\r\n    dispatch(setLoadingAction(false));\r\n    }\r\n  }\r\n// 默认导出函数\r\nexport default {\r\n  saveMoviesAction,\r\n  setLoadingAction,\r\n  setConditionAction,\r\n  deleteAction,\r\n  fetchMovies,\r\n  deleteMovie,\r\n  changeSwitchAction,\r\n  changeSwitch\r\n};\r\n","// import React from \"react\";\r\nimport MovieTable, { IMovieTableEvents } from \"../../components/MovieTable\";\r\nimport { IRootState } from \"../../redux/reducers/RootReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"react\";\r\nimport MovieAction from \"../../redux/actions/MovieAction\";\r\nimport { IMovieState } from \"../../redux/reducers/MovieReducer\";\r\n\r\n//路由=>react-router逻辑 react-router-dom界面相关\r\n// react-redux里面的connect将数据与页面相结合\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieTable)\r\n//映射仓库的状态到属性\r\nfunction mapStateToProps(state: IRootState): IMovieState {\r\n    return state.movie\r\n}\r\n\r\n// 映射仓库的状态到事件 \r\n// Dispatch应该是MovieActions返回的是普通的action对象,而这里触发的是一个函数,不满足条件=>设置any,跳过类型检查\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): IMovieTableEvents {\r\n    return {\r\n        onLoad() {\r\n            dispatch(MovieAction.fetchMovies({\r\n                page: 1,\r\n                limit: 10,\r\n                key: \"\"\r\n            }))\r\n        },\r\n        onSwitchChange(type, newState, id) {\r\n            dispatch(MovieAction.changeSwitch(type, newState, id))\r\n        },\r\n        async onDelete(id) {\r\n            await dispatch(MovieAction.deleteMovie(id))\r\n        },\r\n        onChange(newPage) {\r\n            dispatch(MovieAction.fetchMovies({\r\n                page: newPage\r\n            }))\r\n        },\r\n        onKeyChange(key) {\r\n            dispatch(MovieAction.setConditionAction({\r\n                key\r\n            }))\r\n        },\r\n        onSearch() {\r\n            dispatch(MovieAction.fetchMovies({\r\n                page: 1\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// const HOC = connect(mapStateToProps)\r\n// const MovieContainer = HOC(MovieTable) //提供数据的容器\r\n\r\n// const MovieContainer = connect(mapStateToProps)(MovieTable)\r\n\r\n\r\n// export default class extends React.Component {\r\n//     render() {\r\n//         return (\r\n//             <MovieContainer />\r\n//         )\r\n//     }\r\n// }","import React from \"react\"\r\nimport { NavLink, Route } from \"react-router-dom\"\r\nimport Home from \"./Home\"\r\nimport AddMovie from \"./movie/AddMovie\"\r\nimport EditMovie from \"./movie/EditMovie\"\r\nimport MovieList from \"./movie/MovieList\"\r\nimport { Layout, Menu } from 'antd';\r\nimport { PieChartOutlined } from '@ant-design/icons';\r\nconst { Header, Sider, Content } = Layout;\r\n//路由=>react-router逻辑 react-router-dom界面相关\r\n//界面=>antd UI库\r\nconst _Layout: React.FC = function () {\r\n    return (\r\n        <div className=\"container\">\r\n            {/* Layout布局 */}\r\n            <Layout>\r\n                {/* 上部 */}\r\n                <Header className=\"header\">\r\n                    <NavLink to=\"/\">猫眼电影管理系统</NavLink>\r\n                </Header>\r\n                <Layout>\r\n                    {/* 左侧 */}\r\n                    <Sider>\r\n                        <Menu mode=\"inline\" theme=\"dark\">\r\n                            <Menu.Item key=\"1\" icon={<PieChartOutlined />}>\r\n                                <NavLink to=\"/movie\">电影列表</NavLink>\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"2\" icon={<PieChartOutlined />}>\r\n                                <NavLink to=\"/movie/add\">添加电影</NavLink>\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </Sider>\r\n                    {/* 右侧 */}\r\n                    <Content >\r\n                        <div style={{ padding: \"1.5em\" }}>\r\n                            <Route path=\"/\" component={Home} exact={true}></Route>\r\n                            <Route path=\"/movie\" exact={true} component={MovieList}></Route>\r\n                            <Route path=\"/movie/add\" component={AddMovie}></Route>\r\n                            <Route path=\"/movie/edit/:id\" component={EditMovie}></Route>\r\n                        </div>\r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n        </div>\r\n    )\r\n}\r\nexport default _Layout ","import { Reducer } from \"react\";\r\nimport { ISearchCondition } from \"../../services/CommonTypes\";\r\nimport { IMovie } from \"../../services/MovieService\";\r\nimport {\r\n  DeleteAction,\r\n  MovieActions,\r\n  MovieChangeSwitchAction,\r\n  SaveMoviesAction,\r\n  SetConditionAction,\r\n  SetLoadingAction,\r\n} from \"../actions/MovieAction\";\r\n\r\n//redux状态管理=>reducers数据状态(reducer描述电影的状态类型)\r\nexport type IMovieCondition = Required<ISearchCondition>; //把ISearchCondition所有可选的变成必填\r\n/**\r\n *电影状态\r\n * @export\r\n * @interface IMovieState\r\n */\r\nexport interface IMovieState {\r\n  /**\r\n   *电影数组\r\n   * @type {IMovie[]}\r\n   * @memberof IMovieState\r\n   */\r\n  data: IMovie[];\r\n  /**\r\n   *查询条件\r\n   * @type {IMovieCondition}\r\n   * @memberof IMovieState\r\n   */\r\n  condition: IMovieCondition;\r\n  /**\r\n   *总数\r\n   * @type {number}\r\n   * @memberof IMovieState\r\n   */\r\n  total: number;\r\n  /**\r\n   *是否正在加载数据\r\n   * @type {boolean}\r\n   * @memberof IMovieState\r\n   */\r\n  isLoading: boolean;\r\n  /**\r\n   *总页数\r\n   * @type {number}\r\n   * @memberof IMovieState\r\n   */\r\n  totalPage: number;\r\n}\r\n\r\n//默认状态\r\nconst defaultState: IMovieState = {\r\n  data: [],\r\n  condition: {\r\n    page: 1,\r\n    limit: 10,\r\n    key: \"\",\r\n  },\r\n  total: 0,\r\n  isLoading: false,\r\n  totalPage: 0,\r\n};\r\n\r\n// 更改状态后仓库更新\r\n/**提取state的公共默认状态IMovieState */\r\ntype MovieReducer<A> = Reducer<IMovieState, A>;\r\n// function saveMovie(state: IMovieState, action: SaveMoviesAction): IMovieState {}\r\n/** 电影保存状态类型 */\r\nconst saveMovie: MovieReducer<SaveMoviesAction> = function (state, action) {\r\n  // return Object.assign({}, state, {\r\n  //   data: action.payload.movies,\r\n  //   total: action.payload.total,\r\n  // });\r\n  return {\r\n    ...state,\r\n    data: action.payload.movies,\r\n    total: action.payload.total,\r\n    totalPage: Math.ceil(action.payload.total / state.condition.limit),\r\n  };\r\n};\r\n/** 电影设置状态类型 */\r\nconst setCondition: MovieReducer<SetConditionAction> = function (\r\n  state,\r\n  action\r\n) {\r\n  const newState = {\r\n    ...state,\r\n    condition: {\r\n      ...state.condition,\r\n      ...action.payload,\r\n    },\r\n  };\r\n  newState.totalPage = Math.ceil(newState.total / newState.condition.limit);\r\n  return newState;\r\n};\r\n/** 电影加载状态类型 */\r\nconst setLoading: MovieReducer<SetLoadingAction> = function (state, action) {\r\n  return {\r\n    ...state,\r\n    isLoading: action.payload,\r\n  };\r\n};\r\n/**电影删除状态类型 */\r\nconst deleteMovie: MovieReducer<DeleteAction> = function (state, action) {\r\n  return {\r\n    ...state,\r\n    data: state.data.filter((m) => m._id !== action.payload),\r\n    total: state.total - 1,\r\n    totalPage: Math.ceil((state.total - 1) / state.condition.limit),\r\n  };\r\n};\r\n/**电影热映、经典、即将上映的状态类型 */\r\nconst changeSwitch: MovieReducer<MovieChangeSwitchAction> = function (\r\n  state,\r\n  action\r\n) {\r\n  const movie = state.data.find((d) => d._id === action.payload.id); //根据id先找到电影对象\r\n  if (!movie) {\r\n    return state;\r\n  }\r\n  const newMovie = { ...movie }; //克隆之前的对象\r\n  newMovie[action.payload.type] = action.payload.newVal; //修改\r\n  const newData = state.data.map((d) => {\r\n    if (d._id === action.payload.id) {\r\n      return newMovie;\r\n    } else {\r\n      return d;\r\n    }\r\n  }); //将对象重新放到数组中\r\n  console.log(newData)\r\n  return {\r\n    ...state,\r\n    data:newData,\r\n  };\r\n};\r\n\r\n/**\r\n *导出电影\r\n * @export\r\n * @param {IMovieState} [state=defaultState]\r\n * @param {MovieActions} action\r\n */\r\nexport default function (\r\n  state: IMovieState = defaultState,\r\n  action: MovieActions\r\n) {\r\n  switch (action.type) {\r\n    case \"movie_save\":\r\n      return saveMovie(state, action);\r\n    case \"movie_setCondition\":\r\n      return setCondition(state, action);\r\n    case \"movie_setLoading\":\r\n      return setLoading(state, action);\r\n    case \"movie_delete\":\r\n      return deleteMovie(state, action);\r\n    case \"movie_switch\":\r\n      return changeSwitch(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport MovieReducer, { IMovieState } from \"./MovieReducer\";\r\n/**\r\n *整个网站的根状态\r\n * @export\r\n * @interface IRootStata\r\n */\r\nexport interface IRootState {\r\n  movie: IMovieState;\r\n}\r\n//整个网站的根节点=>合并所有的Reducer\r\nexport const rootReducer = combineReducers({\r\n  movie: MovieReducer,\r\n});\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { IRootState, rootReducer } from \"./reducers/RootReducer\";\r\nimport logger from \"redux-logger\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\n\r\n// 监听状态变化中间件 redux-logger(打印日志到控制台)\r\n// 处理副作用-异步 redux-thunk\r\nexport const store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunk as ThunkMiddleware<IRootState>, logger)\r\n);\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport _Layout from './pages/Layout';\nimport { store } from './redux/store';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Route path=\"/\" component={_Layout}></Route>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"antd/dist/antd.css\"\n\n//界面=>antd UI库\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// import { MovieService } from './services/MovieService';\n// MovieService.add({\n//   name: \"流浪地球\",\n//   timeLong: 120,\n//   types: [\"喜剧\"],\n//   areas: [\"中国大陆\", \"香港\"],\n//   isClassic: true,\n//   isComing: false,\n//   isHot: true\n// }).then(data => {\n//   console.log(data)\n// })\n\n// import { store } from './redux/store';\n// import MovieAction from './redux/actions/MovieAction';\n// 监听状态变化\n// store.subscribe(()=>{\n//   console.log(store.getState())\n// })\n\n// store.dispatch(MovieAction.setLoadingAction(true))\n// store.dispatch(MovieAction.setConditionAction({\n//   page: 2\n// }))\n\n// store.dispatch(MovieAction.fetchMovies({\n//   page: 12\n// })).then(() => {\n//   store.dispatch(MovieAction.deleteMovie(\"5f6c0fbb52d9ed2e34c800a4\"))\n// })\n"],"sourceRoot":""}